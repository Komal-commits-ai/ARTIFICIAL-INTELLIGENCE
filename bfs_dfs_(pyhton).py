# -*- coding: utf-8 -*-
"""BFS DFS (PYHTON).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12IpxtSP6cFeY21SQ6n3OYnulleD1HQt5
"""

#DFS
class Graph:
    def init(self, vertices):
        self.vertices = vertices
        self.graph = [[] for _ in range(vertices)]

    def addEdge(self, u, v):
        self.graph[u].append(v)

    def dfsUtil(self, v, visited):
        visited[v] = True
        print(v, end=' ')
        for neighbor in self.graph[v]:
            if not visited[neighbor]:
                self.dfsUtil(neighbor, visited)

    def dfs(self, start):
        visited = [False] * self.vertices
        self.dfsUtil(start, visited)

class Graph:
    def init(self, vertices):
        self.vertices = vertices
        self.graph = [[] for _ in range(vertices)]

    def addEdge(self, u, v):
        self.graph[u].append(v)

    def bfs(self, start):
        visited = [False] * self.vertices
        queue = [start]
        visited[start] = True

        while queue:
            s = queue.pop(0)
            print(s, end=' ')
            for neighbor in self.graph[s]:
                if not visited[neighbor]:
                    queue.append(neighbor)
                    visited[neighbor] = True